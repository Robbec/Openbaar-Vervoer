dates <- data.frame(Var1 =  as.character(strptime(seq(as.Date("2017-12-06"), as.Date("2017-12-20"), "days"), "%Y-%m-%d")))
# filter eerste spelletje per user
groupByUserMinTimestamp <- database %>%
group_by(user) %>%
slice(which.min(timeStamp))
# datum kolom zonder uren (day)
controlNewUserDaysTimestamps <- cbind(groupByUserMinTimestamp, day = format(strptime(groupByUserMinTimestamp$timeStamp, "%Y-%m-%d"), "%Y-%m-%d"))
# enkel user en day kolom
newUserDays <- subset(controlNewUserDaysTimestamps, select = c(user, day))
# tel users per dag
nbNewUsersPerDay <- data.frame(table(newUserDays$day))
# merge aantal users per dag met alle datums
joinNewNbOfUsersPerDayWithDates <- left_join(dates, nbNewUsersPerDay, by = "Var1")
# vervang NA door 0
joinNewNbOfUsersPerDayWithDates$Freq[is.na(joinNewNbOfUsersPerDayWithDates$Freq)] <- 0
barplot(joinNewNbOfUsersPerDayWithDates$Freq,
main="New users per day",
names.arg= format(as.Date(joinNewNbOfUsersPerDayWithDates$Var1), "%d"),
xlab="Day of December 2017",
ylim=c(0, 30),
ylab="Number of users",
las=2)
database <- read.csv("database.csv")
# alle datums tussen 06-12 en 22-12 als characters omdat merge anders niet werkt met vreemde dateformats
dates <- data.frame(Var1 =  as.character(strptime(seq(as.Date("2017-12-06"), as.Date("2017-12-20"), "days"), "%Y-%m-%d")))
# filter eerste spelletje per user
groupByUserMinTimestamp <- database %>%
group_by(user) %>%
slice(which.min(timeStamp))
# datum kolom zonder uren (day)
controlNewUserDaysTimestamps <- cbind(groupByUserMinTimestamp, day = format(strptime(groupByUserMinTimestamp$timeStamp, "%Y-%m-%d"), "%Y-%m-%d"))
# theme en no theme split
themeControlNewUserDaysTimestamps <- controlNewUserDaysTimestamps[controlNewUserDaysTimestamps$theme == 1,]
noThemeControlNewUserDaysTimestamps <- controlNewUserDaysTimestamps[controlNewUserDaysTimestamps$theme == 0,]
# enkel user en day kolom
themeNewUserDays <- subset(themeControlNewUserDaysTimestamps, select = c(user, day))
noThemeNewUserDays <- subset(noThemeControlNewUserDaysTimestamps, select = c(user, day))
# tel new users per dag
themeNbNewUsersPerDay <- data.frame(table(themeNewUserDays$day))
noThemeNbNewUsersPerDay <- data.frame(table(noThemeNewUserDays$day))
# merge aantal users per dag met alle datums
themeJoinNewNbOfUsersPerDayWithDates <- left_join(dates, themeNbNewUsersPerDay, by = "Var1")
noThemeJoinNewNbOfUsersPerDayWithDates <- left_join(dates, noThemeNbNewUsersPerDay, by = "Var1")
# vervang NA door 0
themeJoinNewNbOfUsersPerDayWithDates$Freq[is.na(themeJoinNewNbOfUsersPerDayWithDates$Freq)] <- 0
noThemeJoinNewNbOfUsersPerDayWithDates$Freq[is.na(noThemeJoinNewNbOfUsersPerDayWithDates$Freq)] <- 0
# combine theme en no theme new users
bothNewUsers <- data.frame(cbind(themeJoinNewNbOfUsersPerDayWithDates$Freq, noThemeJoinNewNbOfUsersPerDayWithDates$Freq))
matrixNewUsers <- do.call(rbind, bothNewUsers)
# grouped barplot new users
barplot(matrixNewUsers,
main="New users",
beside = TRUE,
names.arg= format(as.Date(themeJoinNewNbOfUsersPerDayWithDates$Var1), "%d"),
xlab="Day of December 2017",
ylim=c(0, 20),
ylab="Number of users",
las=2,
legend.text = c("Themed", "Unthemed"),
args.legend = list(x = "topright", bty="n"))
# Datum kolom zonder uren
controlUserDaysTimestamps <- cbind(database, day = format(strptime(database$timeStamp, "%Y-%m-%d"), "%Y-%m-%d"))
# theme en no theme split
themeControlUserDaysTimestamps <- controlUserDaysTimestamps[controlUserDaysTimestamps$theme == 1,]
noThemeControlUserDaysTimestamps <- controlUserDaysTimestamps[controlUserDaysTimestamps$theme == 0,]
# enkel user en day kolom
themeUserDays <- unique(subset(themeControlUserDaysTimestamps, select = c(user, day)))
noThemeUserDays <- unique(subset(noThemeControlUserDaysTimestamps, select = c(user, day)))
# tel users per dag
themeNbUsersPerDay <- data.frame(table(themeUserDays$day))
noThemeNbUsersPerDay <- data.frame(table(noThemeUserDays$day))
# merge aantal users per dag met alle datums
themeJoinNbOfUsersPerDayWithDates <- left_join(dates, themeNbUsersPerDay, by = "Var1")
noThemeJoinNbOfUsersPerDayWithDates <- left_join(dates, noThemeNbUsersPerDay, by = "Var1")
# vervang NA door 0
themeJoinNbOfUsersPerDayWithDates$Freq[is.na(themeJoinNbOfUsersPerDayWithDates$Freq)] <- 0
noThemeJoinNbOfUsersPerDayWithDates$Freq[is.na(noThemeJoinNbOfUsersPerDayWithDates$Freq)] <- 0
# combine theme en no theme users
bothUsers <- data.frame(cbind(themeJoinNbOfUsersPerDayWithDates$Freq - themeJoinNewNbOfUsersPerDayWithDates$Freq, noThemeJoinNbOfUsersPerDayWithDates$Freq - noThemeJoinNewNbOfUsersPerDayWithDates$Freq))
matrixUsers <- do.call(rbind, bothUsers)
# grouped barplot replayers
barplot(matrixUsers,
main="Replayers",
beside = TRUE,
names.arg= format(as.Date(themeJoinNewNbOfUsersPerDayWithDates$Var1), "%d"),
xlab="Day of December 2017",
ylim=c(0, 6),
ylab="Number of replayers",
las=2,
legend.text = c("Themed", "Unthemed"),
args.legend = list(x = "topright", bty="n"))
library(dplyr)
database <- read.csv("database.csv")
# alle datums tussen 06-12 en 22-12 als characters omdat merge anders niet werkt met vreemde dateformats
dates <- data.frame(Var1 =  as.character(strptime(seq(as.Date("2017-12-06"), as.Date("2017-12-20"), "days"), "%Y-%m-%d")))
# filter eerste spelletje per user
groupByUserMinTimestamp <- database %>%
group_by(user) %>%
slice(which.min(timeStamp))
# datum kolom zonder uren (day)
controlNewUserDaysTimestamps <- cbind(groupByUserMinTimestamp, day = format(strptime(groupByUserMinTimestamp$timeStamp, "%Y-%m-%d"), "%Y-%m-%d"))
# enkel user en day kolom
newUserDays <- subset(controlNewUserDaysTimestamps, select = c(user, day))
# tel users per dag
nbNewUsersPerDay <- data.frame(table(newUserDays$day))
# merge aantal users per dag met alle datums
joinNewNbOfUsersPerDayWithDates <- left_join(dates, nbNewUsersPerDay, by = "Var1")
# vervang NA door 0
joinNewNbOfUsersPerDayWithDates$Freq[is.na(joinNewNbOfUsersPerDayWithDates$Freq)] <- 0
barplot(joinNewNbOfUsersPerDayWithDates$Freq,
main="New users per day",
names.arg= format(as.Date(joinNewNbOfUsersPerDayWithDates$Var1), "%d"),
xlab="Day of December 2017",
ylim=c(0, 30),
ylab="Number of users",
las=2)
database <- read.csv("database.csv")
# alle datums tussen 06-12 en 22-12 als characters omdat merge anders niet werkt met vreemde dateformats
dates <- data.frame(Var1 =  as.character(strptime(seq(as.Date("2017-12-06"), as.Date("2017-12-20"), "days"), "%Y-%m-%d")))
# filter eerste spelletje per user
groupByUserMinTimestamp <- database %>%
group_by(user) %>%
slice(which.min(timeStamp))
# datum kolom zonder uren (day)
controlNewUserDaysTimestamps <- cbind(groupByUserMinTimestamp, day = format(strptime(groupByUserMinTimestamp$timeStamp, "%Y-%m-%d"), "%Y-%m-%d"))
# theme en no theme split
themeControlNewUserDaysTimestamps <- controlNewUserDaysTimestamps[controlNewUserDaysTimestamps$theme == 1,]
noThemeControlNewUserDaysTimestamps <- controlNewUserDaysTimestamps[controlNewUserDaysTimestamps$theme == 0,]
# enkel user en day kolom
themeNewUserDays <- subset(themeControlNewUserDaysTimestamps, select = c(user, day))
noThemeNewUserDays <- subset(noThemeControlNewUserDaysTimestamps, select = c(user, day))
# tel new users per dag
themeNbNewUsersPerDay <- data.frame(table(themeNewUserDays$day))
noThemeNbNewUsersPerDay <- data.frame(table(noThemeNewUserDays$day))
# merge aantal users per dag met alle datums
themeJoinNewNbOfUsersPerDayWithDates <- left_join(dates, themeNbNewUsersPerDay, by = "Var1")
noThemeJoinNewNbOfUsersPerDayWithDates <- left_join(dates, noThemeNbNewUsersPerDay, by = "Var1")
# vervang NA door 0
themeJoinNewNbOfUsersPerDayWithDates$Freq[is.na(themeJoinNewNbOfUsersPerDayWithDates$Freq)] <- 0
noThemeJoinNewNbOfUsersPerDayWithDates$Freq[is.na(noThemeJoinNewNbOfUsersPerDayWithDates$Freq)] <- 0
# combine theme en no theme new users
bothNewUsers <- data.frame(cbind(themeJoinNewNbOfUsersPerDayWithDates$Freq, noThemeJoinNewNbOfUsersPerDayWithDates$Freq))
matrixNewUsers <- do.call(rbind, bothNewUsers)
# grouped barplot new users
barplot(matrixNewUsers,
main="New users per day",
beside = TRUE,
names.arg= format(as.Date(themeJoinNewNbOfUsersPerDayWithDates$Var1), "%d"),
xlab="Day of December 2017",
ylim=c(0, 20),
ylab="Number of users",
las=2,
legend.text = c("Themed", "Unthemed"),
args.legend = list(x = "topright", bty="n"))
# Datum kolom zonder uren
controlUserDaysTimestamps <- cbind(database, day = format(strptime(database$timeStamp, "%Y-%m-%d"), "%Y-%m-%d"))
# theme en no theme split
themeControlUserDaysTimestamps <- controlUserDaysTimestamps[controlUserDaysTimestamps$theme == 1,]
noThemeControlUserDaysTimestamps <- controlUserDaysTimestamps[controlUserDaysTimestamps$theme == 0,]
# enkel user en day kolom
themeUserDays <- unique(subset(themeControlUserDaysTimestamps, select = c(user, day)))
noThemeUserDays <- unique(subset(noThemeControlUserDaysTimestamps, select = c(user, day)))
# tel users per dag
themeNbUsersPerDay <- data.frame(table(themeUserDays$day))
noThemeNbUsersPerDay <- data.frame(table(noThemeUserDays$day))
# merge aantal users per dag met alle datums
themeJoinNbOfUsersPerDayWithDates <- left_join(dates, themeNbUsersPerDay, by = "Var1")
noThemeJoinNbOfUsersPerDayWithDates <- left_join(dates, noThemeNbUsersPerDay, by = "Var1")
# vervang NA door 0
themeJoinNbOfUsersPerDayWithDates$Freq[is.na(themeJoinNbOfUsersPerDayWithDates$Freq)] <- 0
noThemeJoinNbOfUsersPerDayWithDates$Freq[is.na(noThemeJoinNbOfUsersPerDayWithDates$Freq)] <- 0
# combine theme en no theme users
bothUsers <- data.frame(cbind(themeJoinNbOfUsersPerDayWithDates$Freq - themeJoinNewNbOfUsersPerDayWithDates$Freq, noThemeJoinNbOfUsersPerDayWithDates$Freq - noThemeJoinNewNbOfUsersPerDayWithDates$Freq))
matrixUsers <- do.call(rbind, bothUsers)
# grouped barplot replayers
barplot(matrixUsers,
main="Replayers per day",
beside = TRUE,
names.arg= format(as.Date(themeJoinNewNbOfUsersPerDayWithDates$Var1), "%d"),
xlab="Day of December 2017",
ylim=c(0, 6),
ylab="Number of replayers",
las=2,
legend.text = c("Themed", "Unthemed"),
args.legend = list(x = "topright", bty="n"))
database <- read.csv("database.csv")
# kolom met som van time en startTime
sumTimePerLog <- data.frame(cbind(theme = database$theme, sumTime = database$startTime + database$time))
# split theme en no theme
themeSumTimePerLog <- sumTimePerLog[sumTimePerLog$theme == 1,]
noThemeSumTimePerLog <- sumTimePerLog[sumTimePerLog$theme == 0,]
# som van alle logs
bothSumTime <- c(sum(themeSumTimePerLog$sumTime), sum(noThemeSumTimePerLog$sumTime))/60
# plot taartdiagram
lbls <- paste(c("Themed (", "Unthemed ("), round(bothSumTime))
lbls <- paste(lbls, " minutes )")
pie(bothSumTime,
main="Total time played",
labels = lbls)
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
res <- replicate(9, NULL)
for (i in 1:9) {
x <- themeData[themeData$level == i, ]
y <- noThemeData[noThemeData$level == i, ]
res[[i]] <- t.test(x$startTime,y$startTime,
alternative = "two.sided")
}
sapply(res, `[[`, "p.value")
database <- read.csv("database.csv")
# kolom met som van time en startTime
sumTimePerLog <- data.frame(cbind(theme = database$theme, sumTime = database$startTime + database$time))
# split theme en no theme
themeSumTimePerLog <- sumTimePerLog[sumTimePerLog$theme == 1,]
noThemeSumTimePerLog <- sumTimePerLog[sumTimePerLog$theme == 0,]
# som van alle logs
bothSumTime <- c(sum(themeSumTimePerLog$sumTime), sum(noThemeSumTimePerLog$sumTime))/60
# plot taartdiagram
lbls <- paste(c("Themed (", "Unthemed ("), round(bothSumTime))
lbls <- paste(lbls, " minutes )")
pie(bothSumTime,
main="Total time played",
labels = lbls)
t.test(themeSumTimePerLog$sumTime,noThemeSumTimePerLog$sumTime,
alternative = "two.sided")
View(sumTimePerLog)
View(sumTimePerLog)
database <- read.csv("database.csv")
# kolom met som van time en startTime
sumTimePerLog <- data.frame(cbind(theme = database$theme, sumTime = database$startTime + database$time))
# split theme en no theme
themeSumTimePerLog <- sumTimePerLog[sumTimePerLog$theme == 1,]
noThemeSumTimePerLog <- sumTimePerLog[sumTimePerLog$theme == 0,]
# som van alle logs
bothSumTime <- c(sum(themeSumTimePerLog$sumTime), sum(noThemeSumTimePerLog$sumTime))/60
# plot taartdiagram
lbls <- paste(c("Themed (", "Unthemed ("), round(bothSumTime))
lbls <- paste(lbls, " minutes )")
pie(bothSumTime,
main="Total time played",
labels = lbls)
t.test(themeSumTimePerLog$sumTime,noThemeSumTimePerLog$sumTime,
alternative = "greater")
database <- read.csv("database.csv")
themeWonData <- database[database$theme == 1 & database$won == 1, ]
noThemeWonData <- database[database$theme == 0 & database$won == 1, ]
# Tweezijdige t-test voor starttijden van gewonnen levels.
res <- replicate(9, NULL)
for (i in 1:9) {
x <- themeWonData[themeWonData$level == i, ]
y <- noThemeWonData[noThemeWonData$level == i, ]
res[[i]] <- t.test(x$startTime,y$startTime,
alternative = "two.sided")
}
sapply(res, `[[`, "p.value")
# Eenzijdige t-test voor starttijden.
themeWonData <- database[database$theme == 1, ]
noThemeWonData <- database[database$theme == 0, ]
t.test(themeWonData$startTime,noThemeWonData$startTime,
alternative = "greater")
database <- read.csv("database.csv")
themeWonData <- database[database$theme == 1 & database$won == 1, ]
noThemeWonData <- database[database$theme == 0 & database$won == 1, ]
# Tweezijdige t-test voor starttijden van gewonnen levels.
res <- replicate(9, NULL)
for (i in 1:9) {
x <- themeWonData[themeWonData$level == i, ]
y <- noThemeWonData[noThemeWonData$level == i, ]
res[[i]] <- t.test(x$startTime,y$startTime,
alternative = "two.sided")
}
sapply(res, `[[`, "p.value")
# Eenzijdige t-test voor starttijden.
themeData <- database[database$theme == 1, ]
noThemeData <- database[database$theme == 0, ]
t.test(themeData$startTime,noThemeData$startTime,
alternative = "greater")
database <- read.csv("database.csv")
themeWonData <- database[database$theme == 1 & database$won == 1, ]
noThemeWonData <- database[database$theme == 0 & database$won == 1, ]
# Tweezijdige t-test voor starttijden per gewonnen level.
res <- replicate(9, NULL)
for (i in 1:9) {
x <- themeWonData[themeWonData$level == i, ]
y <- noThemeWonData[noThemeWonData$level == i, ]
res[[i]] <- t.test(x$startTime,y$startTime,
alternative = "two.sided")
}
sapply(res, `[[`, "p.value")
# Eenzijdige t-test voor starttijden.
themeData <- database[database$theme == 1, ]
noThemeData <- database[database$theme == 0, ]
t.test(themeData$startTime,noThemeData$startTime,
alternative = "greater")
# Eenzijdige t-test voor starttijden van gewonnen levels.
t.test(themeWonData$startTime,noThemeWonData$startTime,
alternative = "greater")
database <- read.csv("database.csv")
themeWonData <- database[database$theme == 1 & database$won == 1, ]
noThemeWonData <- database[database$theme == 0 & database$won == 1, ]
# Tweezijdige t-test voor starttijden per gewonnen level.
res <- replicate(9, NULL)
for (i in 1:9) {
x <- themeWonData[themeWonData$level == i, ]
y <- noThemeWonData[noThemeWonData$level == i, ]
res[[i]] <- t.test(x$startTime,y$startTime,
alternative = "two.sided")
}
sapply(res, `[[`, "p.value")
# Eenzijdige t-test voor starttijden.
themeData <- database[database$theme == 1, ]
noThemeData <- database[database$theme == 0, ]
t.test(themeData$startTime,noThemeData$startTime,
alternative = "greater")
# Eenzijdige t-test voor starttijden van gewonnen levels.
t.test(themeWonData$startTime,noThemeWonData$startTime,
alternative = "two.sided")
database <- read.csv("database.csv")
themeWonData <- database[database$theme == 1 & database$won == 1, ]
noThemeWonData <- database[database$theme == 0 & database$won == 1, ]
# Tweezijdige t-test voor starttijden per gewonnen level.
res <- replicate(9, NULL)
for (i in 1:9) {
x <- themeWonData[themeWonData$level == i, ]
y <- noThemeWonData[noThemeWonData$level == i, ]
res[[i]] <- t.test(x$startTime,y$startTime,
alternative = "two.sided")
}
sapply(res, `[[`, "p.value")
# Eenzijdige t-test voor starttijden.
themeData <- database[database$theme == 1, ]
noThemeData <- database[database$theme == 0, ]
t.test(themeData$startTime,noThemeData$startTime,
alternative = "greater")
# Eenzijdige t-test voor starttijden van gewonnen levels.
t.test(themeWonData$startTime,noThemeWonData$startTime,
alternative = "greater")
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
lmts <- range(0,25)
boxplot(startTime+time ~ level,
data = themeData,
outline = FALSE,
main = "Theme",
ylim=lmts)
boxplot(startTime+time ~ level,
data = noThemeData,
outline = FALSE,
main = "No theme",
ylim=lmts)
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
lmts <- range(0,25)
boxplot(startTime ~ level,
data = themeData,
outline = FALSE,
main = "Theme",
ylim=lmts)
boxplot(startTime ~ level,
data = noThemeData,
outline = FALSE,
main = "No theme",
ylim=lmts)
lmts <- range(0,17)
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
lmts <- range(0,17)
boxplot(startTime ~ level,
data = themeData,
outline = FALSE,
main = "Theme",
ylim=lmts)
boxplot(startTime ~ level,
data = noThemeData,
outline = FALSE,
main = "No theme",
ylim=lmts)
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
lmts <- range(0,17)
boxplot(startTime ~ level,
data = themeData,
outline = FALSE,
main = "Theme",
ylim=lmts,
xlab = "Level",
ylab = "Starting time")
boxplot(startTime ~ level,
data = noThemeData,
outline = FALSE,
main = "No theme",
ylim=lmts,
xlab = "Level",
ylab = "Starting time")
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
# par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
# par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
# lmts <- range(0,17)
# boxplot(startTime ~ level,
#         data = themeData,
#         outline = FALSE,
#         main = "Theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
# boxplot(startTime ~ level,
#         data = noThemeData,
#         outline = FALSE,
#         main = "No theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
require(reshape2)
# melting by "Label". `melt is from the reshape2 package.
# do ?melt to see what other things it can do (you will surely need it)
df.m <- melt(database, id.var = "level")
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Label))
install.packages("reshape2")
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
# par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
# par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
# lmts <- range(0,17)
# boxplot(startTime ~ level,
#         data = themeData,
#         outline = FALSE,
#         main = "Theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
# boxplot(startTime ~ level,
#         data = noThemeData,
#         outline = FALSE,
#         main = "No theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
require(reshape2)
# melting by "Label". `melt is from the reshape2 package.
# do ?melt to see what other things it can do (you will surely need it)
df.m <- melt(database, id.var = "level")
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Label))
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
# par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
# par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
# lmts <- range(0,17)
# boxplot(startTime ~ level,
#         data = themeData,
#         outline = FALSE,
#         main = "Theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
# boxplot(startTime ~ level,
#         data = noThemeData,
#         outline = FALSE,
#         main = "No theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
require(reshape2)
# melting by "Label". `melt is from the reshape2 package.
# do ?melt to see what other things it can do (you will surely need it)
df.m <- melt(database, id.var = "level")
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=Label))
database <- read.csv("database.csv")
themeData <- database[database$theme == 1 & database$won == 1, ]
noThemeData <- database[database$theme == 0 & database$won == 1, ]
# par(mfrow = c(2, 1)) # definieer een layout met 1 rij en 2 cols
# par(mar = c(4, 4, 4, 4)) # definieer de breedte van de marges
# lmts <- range(0,17)
# boxplot(startTime ~ level,
#         data = themeData,
#         outline = FALSE,
#         main = "Theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
# boxplot(startTime ~ level,
#         data = noThemeData,
#         outline = FALSE,
#         main = "No theme",
#         ylim=lmts,
#         xlab = "Level",
#         ylab = "Starting time")
require(reshape2)
# melting by "Label". `melt is from the reshape2 package.
# do ?melt to see what other things it can do (you will surely need it)
df.m <- melt(database, id.var = "theme")
require(ggplot2)
ggplot(data = df.m, aes(x=variable, y=value)) + geom_boxplot(aes(fill=level))
